{"version":3,"file":"stats.js","mappings":"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","sources":["webpack://homework-7/./src/const.js","webpack://homework-7/./src/stats/stats.js"],"sourcesContent":["export const counterId = 'D9F99E50-3339-11EC-9EDF-7F93090795B7';\r\n","import eachDayOfInterval from 'date-fns/eachDayOfInterval';\r\nimport format from 'date-fns/format';\r\nimport {counterId} from \"../const\";\r\n\r\nconst logStyle = 'font-size:18px; font-weight: bold;padding:3px 5px;color:magenta';\r\n\r\nfunction quantile(arr, q) {\r\n    const sorted = arr.sort((a, b) => a - b);\r\n    const pos = (sorted.length - 1) * q;\r\n    const base = Math.floor(pos);\r\n    const rest = pos - base;\r\n\r\n    if (sorted[base + 1] !== undefined) {\r\n        return Math.floor(sorted[base] + rest * (sorted[base + 1] - sorted[base]));\r\n    } else {\r\n        return Math.floor(sorted[base]);\r\n    }\r\n}\r\n\r\nfunction prepareData(result) {\r\n    return result.data.map(item => {\r\n        item.date = item.timestamp.split('T')[0];\r\n\r\n        return item;\r\n    });\r\n}\r\n\r\n// показать значение метрики за несколько дней\r\nfunction showMetricByPeriod(data, period, page, metric) {\r\n    const dates = eachDayOfInterval({\r\n        start: new Date(period.dateFrom),\r\n        end: new Date(period.dateTo)\r\n    });\r\n\r\n    let table = {};\r\n\r\n    dates.forEach(date => {\r\n        let formatDate = format(date, 'yyyy-MM-dd');\r\n        table[formatDate] = addMetricByDate(data, page, metric, formatDate);\r\n    });\r\n\r\n    console.log(`%cAll metrics from ${period.dateFrom} to ${period.dateTo} for ${metric} metric`, logStyle);\r\n    console.table(table);\r\n}\r\n\r\n// показать сессию пользователя\r\nfunction showSession(data, requestId) {\r\n    let requestData = {};\r\n\r\n    data\r\n        .filter(item => item.requestId === requestId)\r\n        .forEach(item => {\r\n            requestData[item.name] = item.value\r\n        });\r\n\r\n    let table = {};\r\n\r\n    table[requestId] = requestData;\r\n\r\n    console.log(`%cMetrics from requestId ${requestId}`, logStyle);\r\n    console.table(table)\r\n}\r\n\r\nfunction findSettingValues(data, page, metric, settingName) {\r\n    return new Set(data\r\n        .filter(item => item.page === page && item.name === metric && item.additional[settingName])\r\n        .map(item => item.additional[settingName]));\r\n}\r\n\r\n// сравнить метрику в разных срезах\r\nfunction compareMetric(data, page, metric, settingName) {\r\n    let table = {};\r\n\r\n    let settingValues = findSettingValues(data, page, metric, settingName);\r\n    for (let value of settingValues) {\r\n        table[value] = addMetricBySetting(data, page, metric, settingName, value);\r\n    }\r\n\r\n    console.log(`%cCompare ${settingName} setting for ${metric} metric`, logStyle);\r\n    console.table(table);\r\n}\r\n\r\n// возвращает одну метрику по значению указанного среза\r\nfunction addMetricBySetting(data, page, metric, settingName, settingValue) {\r\n    let sampleData = data\r\n        .filter(item => item.page === page && item.name === metric && item.additional[settingName] === settingValue)\r\n        .map(item => item.value);\r\n\r\n    let result = {};\r\n\r\n    result.hits = sampleData.length;\r\n    result.p25 = quantile(sampleData, 0.25);\r\n    result.p50 = quantile(sampleData, 0.5);\r\n    result.p75 = quantile(sampleData, 0.75);\r\n    result.p95 = quantile(sampleData, 0.95);\r\n\r\n    return result;\r\n}\r\n\r\n\r\n// возвращает одну метрику за день\r\nfunction addMetricByDate(data, page, name, date) {\r\n    let sampleData = data\r\n        .filter(item => item.page === page && item.name === name && item.date === date)\r\n        .map(item => item.value);\r\n\r\n    let result = {};\r\n\r\n    result.hits = sampleData.length;\r\n    result.p25 = quantile(sampleData, 0.25);\r\n    result.p50 = quantile(sampleData, 0.5);\r\n    result.p75 = quantile(sampleData, 0.75);\r\n    result.p95 = quantile(sampleData, 0.95);\r\n\r\n    return result;\r\n}\r\n\r\n// рассчитывает все метрики за день\r\nfunction calcMetricsByDate(data, page, date) {\r\n    let table = {};\r\n    table.connect = addMetricByDate(data, page, 'connect', date);\r\n    table.ttfb = addMetricByDate(data, page, 'ttfb', date);\r\n    table.ttfcp = addMetricByDate(data, page, 'ttfcp', date);\r\n    table.ttfmp = addMetricByDate(data, page, 'ttfmp', date);\r\n\r\n    console.log(`%cAll metrics for ${date}:`, logStyle);\r\n    console.table(table);\r\n}\r\n\r\nfetch(`https://shri.yandex/hw/stat/data?counterId=${counterId}`)\r\n    .then(res => res.json())\r\n    .then(result => {\r\n        let data = prepareData(result);\r\n\r\n        showSession(data, '914323395455');\r\n\r\n        calcMetricsByDate(data, 'game', '2021-10-31');\r\n\r\n        const period = {\r\n            dateFrom: '2021-10-31',\r\n            dateTo: '2021-11-01',\r\n        };\r\n        showMetricByPeriod(data, period, 'game', 'ttfmp');\r\n\r\n        compareMetric(data, 'game', 'ttfmp', 'browser');\r\n        compareMetric(data, 'game', 'ttfmp', 'platform');\r\n    });\r\n"],"names":["counterId","eachDayOfInterval","format","logStyle","quantile","arr","q","sorted","sort","a","b","pos","length","base","Math","floor","rest","undefined","prepareData","result","data","map","item","date","timestamp","split","showMetricByPeriod","period","page","metric","dates","start","Date","dateFrom","end","dateTo","table","forEach","formatDate","addMetricByDate","console","log","showSession","requestId","requestData","filter","name","value","findSettingValues","settingName","Set","additional","compareMetric","settingValues","addMetricBySetting","settingValue","sampleData","hits","p25","p50","p75","p95","calcMetricsByDate","connect","ttfb","ttfcp","ttfmp","fetch","then","res","json"],"sourceRoot":""}